import { Router } from 'express';
import logoutHandler from '../../controllers/authController/logoutHandler';
import * as handler from '../../controllers/users-controller/';
import changePasswordHandler from '../../controllers/users-controller/changePasswordHandler';
import deleteAccountHandler from '../../controllers/users-controller/deleteAccountHandler';
import getMeHandler from '../../controllers/users-controller/getMeHandler';
import getUserHandler from '../../controllers/users-controller/getUserHandler';
import updateAvatarHandler from '../../controllers/users-controller/updateAvatarHandler';
import { UsersRoutePaths } from '../../enums/APIRoutPaths';
import { multerUpload } from '../../lib/fileUpload';
import authMiddleware from '../../middleware/authMiddleware';
import { validate } from '../../middleware/validate';
import { changePasswordSchema } from '../../user-input-validation-schema/change-password-schema';
import getUserProfileHandler from '@/controllers/users-controller/profile-controller/getUserProfileHandler';

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - firstName
 *         - lastName
 *       properties:
 *         _id:
 *           type: string
 *           description: Autogenerated ObjectID
 *         firstName:
 *           type: string
 *           description: user first name
 *         lastName:
 *           type: string
 *           description: user last name
 */

/**
 * @swagger
 * tags:
 *   name: Users
 *   description: Users API
 */

/**
 * @swagger
 * /api/users/me:
 *   get:
 *     summary: Returns the logged in user
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: A Single user
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               items:
 *                 $ref: '#/components/schemas/User'
 */

const userRouter = Router();

// Protect all routes after this middleware
userRouter.use(authMiddleware);

userRouter
  .route(UsersRoutePaths.ME)
  .get(getMeHandler, getUserHandler)
  .put(deleteAccountHandler, logoutHandler)
  .patch(getMeHandler, handler.updateMeHandler);

userRouter.post(
  UsersRoutePaths.UPLOAD_AVATAR,
  multerUpload.single('avatar'),
  updateAvatarHandler,
);
userRouter.put(
  UsersRoutePaths.CHANGE_PASSWORD,
  validate(changePasswordSchema),
  changePasswordHandler,
);

userRouter
  .route(`${UsersRoutePaths.ROOT}/${UsersRoutePaths.PROFILE}`)
  .get(getMeHandler, getUserProfileHandler)
  .patch(handler.updateProfile);

userRouter.post('/profile/experience', handler.createExperience);
userRouter
  .route('/profile/experience/:objectId')
  // .get()
  .patch(handler.updateExperience)
  .delete(handler.deleteExperience);

userRouter.post('/profile/education', handler.createEducation);
userRouter
  .route('/profile/education/:objectId')
  // .get()
  .patch(handler.updateEducation)
  .delete(handler.deleteEducation);

userRouter.post('/profile/certification', handler.createCertification);
userRouter
  .route('/profile/certification/:objectId')
  // .get()
  .patch(handler.updateCertification)
  .delete(handler.deleteCertification);
// Routes for a user to an interest or skill that doesn't exist in the database
userRouter.post(
  'profile/add-interest',
  handler.createInterest,
  handler.updateProfile,
);
export default userRouter;
